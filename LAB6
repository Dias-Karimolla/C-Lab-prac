using System;
using System.IO;
using System.Threading;
using System.Collections.Generic;

// ==== Singleton ====
public enum LogLevel { INFO, WARNING, ERROR }

public class Logger
{
    private static Logger _instance;
    private static readonly object _lock = new object();
    private LogLevel _logLevel = LogLevel.INFO;
    private string _logFilePath = "log.txt";

    private Logger() { }

    public static Logger GetInstance()
    {
        if (_instance == null)
            lock (_lock) { if (_instance == null) _instance = new Logger(); }
        return _instance;
    }

    public void SetLogLevel(LogLevel level) => _logLevel = level;
    public void SetLogFilePath(string path) => _logFilePath = path;

    public void Log(LogLevel level, string message)
    {
        if (level >= _logLevel)
            lock (_lock) { File.AppendAllText(_logFilePath, $"{DateTime.Now} [{level}] {message}\n"); }
    }

    public string ReadLogs() => File.Exists(_logFilePath) ? File.ReadAllText(_logFilePath) : "No logs";
}

// ==== Builder ====
public class Computer
{
    public string CPU { get; set; }
    public string RAM { get; set; }
    public string Storage { get; set; }
    public string GPU { get; set; }
    public string OS { get; set; }

    public override string ToString() => $"CPU: {CPU}, RAM: {RAM}, Storage: {Storage}, GPU: {GPU}, OS: {OS}";
}

public interface IComputerBuilder { void SetCPU(); void SetRAM(); void SetStorage(); void SetGPU(); void SetOS(); Computer GetComputer(); }

public class OfficeComputerBuilder : IComputerBuilder
{
    private Computer _computer = new Computer();
    public void SetCPU() => _computer.CPU = "Intel i3";
    public void SetRAM() => _computer.RAM = "8GB";
    public void SetStorage() => _computer.Storage = "1TB HDD";
    public void SetGPU() => _computer.GPU = "Integrated";
    public void SetOS() => _computer.OS = "Windows 10";
    public Computer GetComputer() => _computer;
}

public class GamingComputerBuilder : IComputerBuilder
{
    private Computer _computer = new Computer();
    public void SetCPU() => _computer.CPU = "Intel i9";
    public void SetRAM() => _computer.RAM = "32GB";
    public void SetStorage() => _computer.Storage = "1TB SSD";
    public void SetGPU() => _computer.GPU = "NVIDIA RTX 3080";
    public void SetOS() => _computer.OS = "Windows 11";
    public Computer GetComputer() => _computer;
}

public class ComputerDirector
{
    private IComputerBuilder _builder;
    public ComputerDirector(IComputerBuilder builder) => _builder = builder;
    public void Construct() { _builder.SetCPU(); _builder.SetRAM(); _builder.SetStorage(); _builder.SetGPU(); _builder.SetOS(); }
    public Computer GetComputer() => _builder.GetComputer();
}

// ==== Prototype ====
public interface IPrototype { IPrototype Clone(); }

public class Section : IPrototype
{
    public string Title { get; set; }
    public string Text { get; set; }
    public Section(string title, string text) { Title = title; Text = text; }
    public IPrototype Clone() => new Section(Title, Text);
    public override string ToString() => $"Section: {Title}, Text: {Text}";
}

public class Image : IPrototype
{
    public string URL { get; set; }
    public Image(string url) => URL = url;
    public IPrototype Clone() => new Image(URL);
    public override string ToString() => $"Image: {URL}";
}

public class Document : IPrototype
{
    public string Title { get; set; }
    public List<IPrototype> Elements { get; set; } = new List<IPrototype>();
    public Document(string title) => Title = title;
    public void AddElement(IPrototype element) => Elements.Add(element);
    public IPrototype Clone() { var doc = new Document(Title); Elements.ForEach(e => doc.AddElement(e.Clone())); return doc; }
    public override string ToString() => $"Document: {Title}\n" + string.Join("\n", Elements);
}

public class DocumentManager
{
    public Document CreateDocument(IPrototype prototype) => (Document)prototype.Clone();
}

// ==== Main Program ====
class Program
{
    static void LogInThread(LogLevel level, string message) => Logger.GetInstance().Log(level, message);

    static void Main(string[] args)
    {
        // ==== Singleton ====
        Logger logger = Logger.GetInstance();
        logger.SetLogLevel(LogLevel.INFO);

        Thread[] threads = new Thread[3];
        threads[0] = new Thread(() => LogInThread(LogLevel.INFO, "Info message"));
        threads[1] = new Thread(() => LogInThread(LogLevel.WARNING, "Warning message"));
        threads[2] = new Thread(() => LogInThread(LogLevel.ERROR, "Error message"));

        foreach (var thread in threads) thread.Start();
        foreach (var thread in threads) thread.Join();

        Console.WriteLine("Logs:\n" + logger.ReadLogs());

        // ==== Builder ====
        var director = new ComputerDirector(new OfficeComputerBuilder());
        director.Construct();
        Console.WriteLine(director.GetComputer());

        director = new ComputerDirector(new GamingComputerBuilder());
        director.Construct();
        Console.WriteLine(director.GetComputer());

        // ==== Prototype ====
        Document originalDoc = new Document("Original");
        originalDoc.AddElement(new Section("Intro", "Introduction text"));
        originalDoc.AddElement(new Image("image1.png"));

        Document clonedDoc = new DocumentManager().CreateDocument(originalDoc);
        clonedDoc.AddElement(new Section("Conclusion", "Conclusion text"));

        Console.WriteLine("\nOriginal Document:\n" + originalDoc);
        Console.WriteLine("\nCloned Document:\n" + clonedDoc);
    }
}
