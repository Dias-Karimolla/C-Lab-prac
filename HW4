public class Order
{
    public string ProductName { get; set; }
    public int Quantity { get; set; }
    public double Price { get; set; }

    public Order(string productName, int quantity, double price)
    {
        ProductName = productName;
        Quantity = quantity;
        Price = price;
    }
}

public class PriceCalculator
{
    public double CalculateTotalPrice(Order order)
    {
        return order.Quantity * order.Price * 0.9;
    }
}

public class PaymentProcessor
{
    public void ProcessPayment(string paymentDetails)
    {
        Console.WriteLine("Payment processed using: " + paymentDetails);
    }
}

public class EmailService
{
    public void SendConfirmationEmail(string email)
    {
        Console.WriteLine("Confirmation email sent to: " + email);
    }
}

public class Employee
{
    public string Name { get; set; }
    public double BaseSalary { get; set; }

    public Employee(string name, double baseSalary)
    {
        Name = name;
        BaseSalary = baseSalary;
    }

    public virtual double CalculateSalary()
    {
        return BaseSalary;
    }
}

public class PermanentEmployee : Employee
{
    public PermanentEmployee(string name, double baseSalary) : base(name, baseSalary) { }

    public override double CalculateSalary()
    {
        return BaseSalary * 1.2;
    }
}

public class ContractEmployee : Employee
{
    public ContractEmployee(string name, double baseSalary) : base(name, baseSalary) { }

    public override double CalculateSalary()
    {
        return BaseSalary * 1.1;
    }
}

public class InternEmployee : Employee
{
    public InternEmployee(string name, double baseSalary) : base(name, baseSalary) { }

    public override double CalculateSalary()
    {
        return BaseSalary * 0.8;
    }
}

public interface IPrinter
{
    void Print(string content);
}

public interface IScanner
{
    void Scan(string content);
}

public interface IFax
{
    void Fax(string content);
}

public class AllInOnePrinter : IPrinter, IScanner, IFax
{
    public void Print(string content)
    {
        Console.WriteLine("Printing: " + content);
    }

    public void Scan(string content)
    {
        Console.WriteLine("Scanning: " + content);
    }

    public void Fax(string content)
    {
        Console.WriteLine("Faxing: " + content);
    }
}

public class BasicPrinter : IPrinter
{
    public void Print(string content)
    {
        Console.WriteLine("Printing: " + content);
    }
}

public interface INotificationSender
{
    void Send(string message);
}

public class EmailSender : INotificationSender
{
    public void Send(string message)
    {
        Console.WriteLine("Email sent: " + message);
    }
}

public class SmsSender : INotificationSender
{
    public void Send(string message)
    {
        Console.WriteLine("SMS sent: " + message);
    }
}

public class NotificationService
{
    private readonly INotificationSender _notificationSender;

    public NotificationService(INotificationSender notificationSender)
    {
        _notificationSender = notificationSender;
    }

    public void SendNotification(string message)
    {
        _notificationSender.Send(message);
    }
}

class Program
{
    static void Main()
    {
        var order = new Order("Laptop", 2, 1200);
        var priceCalculator = new PriceCalculator();
        var paymentProcessor = new PaymentProcessor();
        var emailService = new EmailService();

        double totalPrice = priceCalculator.CalculateTotalPrice(order);
        paymentProcessor.ProcessPayment("Credit Card");
        emailService.SendConfirmationEmail("customer@example.com");
        Console.WriteLine("Total price: " + totalPrice);

        var employees = new List<Employee>
        {
            new PermanentEmployee("Alice", 5000),
            new ContractEmployee("Bob", 4000),
            new InternEmployee("Charlie", 3000)
        };

        foreach (var employee in employees)
        {
            Console.WriteLine($"{employee.Name}'s salary: {employee.CalculateSalary()}");
        }

        IPrinter printer = new BasicPrinter();
        printer.Print("Document");

        IPrinter allInOne = new AllInOnePrinter();
        allInOne.Print("Another Document");

        INotificationSender emailSender = new EmailSender();
        INotificationSender smsSender = new SmsSender();

        var notificationService = new NotificationService(emailSender);
        notificationService.SendNotification("Order confirmation");

        notificationService = new NotificationService(smsSender);
        notificationService.SendNotification("Order shipped");
    }
}
