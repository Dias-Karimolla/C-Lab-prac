using System;

namespace CarOrderSystem
{
    public enum TripState
    {
        Idle,
        CarSelected,
        OrderConfirmed,
        CarArrived,
        InTrip,
        TripCompleted,
        TripCancelled
    }

    public class CarOrder
    {
        public TripState State { get; private set; } = TripState.Idle;

        public void SelectCar()
        {
            if (State == TripState.Idle)
            {
                State = TripState.CarSelected;
                Console.WriteLine("Автомобиль выбран. Подтвердите заказ");
            }
            else
            {
                Console.WriteLine("Невозможно выбрать автомобиль в текущем состоянии: " + State);
            }
        }

        public void ConfirmOrder()
        {
            if (State == TripState.CarSelected)
            {
                State = TripState.OrderConfirmed;
                Console.WriteLine("Заказ подтвержден. Автомобиль уже в пути");
            }
            else
            {
                Console.WriteLine("Невозможно подтвердить заказ в текущем состоянии " + State);
            }
        }

        public void CarArrives()
        {
            if (State == TripState.OrderConfirmed)
            {
                State = TripState.CarArrived;
                Console.WriteLine("Автомобиль прибыл. Готовы начать поездку");
            }
            else
            {
                Console.WriteLine("Автомобиль не может прибыть в текущем состоянии: " + State);
            }
        }

        public void StartTrip()
        {
            if (State == TripState.CarArrived)
            {
                State = TripState.InTrip;
                Console.WriteLine("Поездка началась. Приятной поездки!");
            }
            else
            {
                Console.WriteLine("Невозможно начать поездку в текущем состоянии: " + State);
            }
        }

        public void CompleteTrip()
        {
            if (State == TripState.InTrip)
            {
                State = TripState.TripCompleted;
                Console.WriteLine("Поездка завершена. Спасибо за использование сервиса!");
            }
            else
            {
                Console.WriteLine("Невозможно завершить поездку в текущем состоянии: " + State);
            }
        }

        public void CancelOrder()
        {
            if (State != TripState.InTrip && State != TripState.TripCompleted)
            {
                State = TripState.TripCancelled;
                Console.WriteLine("Заказ отменен.");
            }
            else
            {
                Console.WriteLine("Невозможно отменить заказ в текущем состоянии: " + State);
            }
        }
    }
}


namespace CarOrderSystem
{
    class Program
    {
        static void Main(string[] args)
        {
            var order = new CarOrder();

            // Симуляция процесса
            Console.WriteLine("Current State: " + order.State);
            order.SelectCar();

            Console.WriteLine("Current State: " + order.State);
            order.ConfirmOrder();

            Console.WriteLine("Current State: " + order.State);
            order.CarArrives();

            Console.WriteLine("Current State: " + order.State);
            order.StartTrip();

            Console.WriteLine("Current State: " + order.State);
            order.CompleteTrip();

            Console.WriteLine("Current State: " + order.State);
        }
    }
}
